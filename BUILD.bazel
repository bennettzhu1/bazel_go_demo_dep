load("@bazel_gazelle//:def.bzl", "gazelle")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_image_index", "oci_load", "oci_push")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load(":transition.bzl", "multi_arch")

platform(
    name = "linux_arm64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:arm64",
    ],
)

platform(
    name = "linux_amd64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

# This command generates/updates BUILD files based on go source code. We're going to exclude all vendor
# folders and sub-folders since we want gazelle to use the central go.mod

# gazelle:prefix github.com/bennettzhu1/multi-module-demo
gazelle(
    name = "gazelle",
)

go_library(
    name = "multi-module-demo_lib",
    srcs = ["main.go"],
    importpath = "github.com/bennettzhu1/multi-module-demo",
    visibility = ["//visibility:private"],
    deps = [
        "//lib",
        "@com_github_pkg_errors//:errors",
    ],
)

go_binary(
    name = "multi-module-demo",
    embed = [":multi-module-demo_lib"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "cert-exporter_tar",
    srcs = [":multi-module-demo"],
    mode = "0755",
    visibility = ["//visibility:public"],
)

oci_image(
    name = "cert-exporter_image",
    base = "@ubuntu_noble",
    entrypoint = ["/cert-exporter"],
    tars = [":cert-exporter_tar"],
)

multi_arch(
    name = "cert-exporter_multiarch",
    image = ":cert-exporter_image",
    platforms = [
        "//:linux_arm64",
        "//:linux_amd64",
    ],
)
